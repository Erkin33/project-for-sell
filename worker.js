// worker.js
export default {
  async fetch(request, env) {
    if (request.method !== 'POST') {
      return new Response('Method Not Allowed', { status: 405 });
    }

    try {
      const body = await request.json();

      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è
      const S = (v) => String(v ?? '').replace(/[`<>\x00\r\t]/g, ' ').slice(0, 4000);

      const text =
`üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞
üìÑ –§–æ—Ä–º–∞: *${S(body.formName || '–§–æ—Ä–º–∞')}*
üë§ –ò–º—è: _${S(body.name)}_
üìû –¢–µ–ª–µ—Ñ–æ–Ω: _${S(body.phone)}_
‚úâÔ∏è Email: _${S(body.email)}_
üóÇ –¢–∏–ø —Å–±–æ—Ä–∞: _${S(body.collectType || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}_
üìù –°–æ–æ–±—â–µ–Ω–∏–µ:
\`\`\`
${S(body.message)}
\`\`\`
üîó –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${S(body.page)}
üñ• UA: ${S(body.ua)}`;

      const chatIds = String(env.TG_CHAT_IDS || '')
        .split(',')
        .map(s => Number(s.trim()))
        .filter(n => Number.isFinite(n));

      if (!env.TG_BOT_TOKEN) {
        return Response.json({ success: false, error: 'Missing TG_BOT_TOKEN' }, { status: 500 });
      }
      if (!chatIds.length) {
        return Response.json({ success: false, error: 'No TG_CHAT_IDS configured' }, { status: 500 });
      }

      const api = (method) => `https://api.telegram.org/bot${env.TG_BOT_TOKEN}/${method}`;

      // –®–ª—ë–º –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
      for (const chat_id of chatIds) {
        await fetch(api('sendMessage'), {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id,
            text,
            parse_mode: 'Markdown',
            disable_web_page_preview: true
          })
        });
      }

      return Response.json({ success: true });
    } catch (e) {
      return Response.json({ success: false, error: e.message }, { status: 500 });
    }
  }
}
